https://codepen.io/benzcraddock/pen/KKqJwrE

1. What is Semantic HTML?
-> To describe tags in HTML with meaning (h1, p, section, nav...).
2. What is HTML used for?
-> used for displaying data in a graphical form on a web page as opposed to executing tasks.
3. What is an attribute and where do we put it?
-> attribute is another way to supply data to an element, it goes inside the opening tag of an element.
4. What is the h1 tag used for? How many times should I use it on a page?
-> h1 is the largest heading tag and should only be used once.
5. Name two tags that have required attributes
-> a and img.
6. What do we put in the head of our HTML document?
-> a container for metadata for specific information about web page that is not displayed to user.
7. What is an id?
-> a type of selector used in CSS and is a titles that can only appear on a single element. 
8. What elements can I add an id to?
-> div and sections.
9. How many times can I use the same id on a page?
-> once.
10. What is a class?
-> a type of selector used in CSS that can apply to multiple elements.
11. What elements can I add a class to?
-> sections, divs.
12. How many times can I use the same class on a page?
-> multiple times.
13. How do I get my link to open in a new tab?
-> target="_blank".
14. What is the alt attribute in the image tag used for?
-> alternate text to be displayed if an image cannot be displayed.
15. How do I reference an id?
-> use a '#'.
16. What is the difference between a section and a div
-> div splits content into halves, while section wraps the content.
17. What is CSS used for?
-> works with HTML and allows developer to add style and layout to web pages. 
18. How to we select an element? Example - every h2 on the page
-> example: h2 { }
19. What is the difference between a class and an id? - Give me an example of when I might use each one
-> a class can apply to multiple elements while an id selector can only appear on a single element, you might use an id for headers or footers while class you would use on paragraphs.
20. How do we select classes in CSS?
-> use a '.'
21. How do we select a p element with a single class of “human””?
-> .human p { }
22. What is a parent child selector? When would this be useful?
-> selects elements that are the child of a specific parent, it would be useful if we want to select all elements in a parent class and ensures DRY code.
23. How do you select all links within a div with the class of sidebar?
-> .sidebar:link { }
24. What is a pseudo selector?
-> used to add styles to selectors only upon meeting certain conditions (like hover).
25. What do we use the change the spacing between lines?
-> line-height
26. What do we use to change the spacing between letters?
-> letter-spacing
27. What do we use to to change everything to CAPITALS? lowercase? Capitalize?
-> text-transform (uppercase, lowercase, capitalize)
28. How do I add a 1px border around my div that is dotted and black?
-> .div { border: 1px dotted black; }
29. How do I select everything on the page?
-> use an asterisk (* { })) 
30. How do I write a comment in CSS?
-> /* write comment here */
31. How do I find out what file I am in, when I am using the command line?
-> pwd 
32. Using the command line - how do I see a list of files/folders in my current folder?
-> ls -al
33. How do I remove a file via the command line? Why do I have to be careful with this?
-> rm <file> you would never be able to access this file ever again, and you could delete other important files / directories if you are not being careful.
34. Why should I use version control?
-> it helps to maintain a history of what changes have happened
35. How often should I commit to github?
-> as often as possible, quite a few times every hour.
36. What is the command we would use to push our repo up to github? 
-> git push -u origin <branch-name>
37. Walk me through Lambda's git flow.
-> first you must fork the repo.
-> clone the repo (ssh and not https).
-> locate directory in terminal where forked repo is to be cloned, and then use git clone <link-to-repo> command. 
-> cd to the newly created repo.
-> use git checkout -b <branch-name> to create your own branch.
-> start working on your repo.
-> git status to check changes.
-> git add . to add repo changes to be ready for committing.
-> git commit - m "message for developers to see what changes you made and why goes here" commits changes.
-> git push -u origin branch-name to push commits from local pc to github remote cloud.
-> submit a pull request on github and make sure you select your name-branch and not the original repo.
-> switch base repository to the forked repo and create pull request.